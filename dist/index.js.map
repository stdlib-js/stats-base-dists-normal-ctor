{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar entropy = require( '@stdlib/stats-base-dists-normal-entropy' );\nvar kurtosis = require( '@stdlib/stats-base-dists-normal-kurtosis' );\nvar mean = require( '@stdlib/stats-base-dists-normal-mean' );\nvar median = require( '@stdlib/stats-base-dists-normal-median' );\nvar mode = require( '@stdlib/stats-base-dists-normal-mode' );\nvar skewness = require( '@stdlib/stats-base-dists-normal-skewness' );\nvar stdev = require( '@stdlib/stats-base-dists-normal-stdev' );\nvar variance = require( '@stdlib/stats-base-dists-normal-variance' );\nvar cdf = require( '@stdlib/stats-base-dists-normal-cdf' );\nvar logcdf = require( '@stdlib/stats-base-dists-normal-logcdf' );\nvar logpdf = require( '@stdlib/stats-base-dists-normal-logpdf' );\nvar mgf = require( '@stdlib/stats-base-dists-normal-mgf' );\nvar pdf = require( '@stdlib/stats-base-dists-normal-pdf' );\nvar quantile = require( '@stdlib/stats-base-dists-normal-quantile' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction normalCDF( x ) {\n\treturn cdf( x, this.mu, this.sigma );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction normalLogCDF( x ) {\n\treturn logcdf( x, this.mu, this.sigma );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction normalLogPDF( x ) {\n\treturn logpdf( x, this.mu, this.sigma );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction normalMGF( t ) {\n\treturn mgf( t, this.mu, this.sigma );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction normalPDF( x ) {\n\treturn pdf( x, this.mu, this.sigma );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction normalQuantile( p ) {\n\treturn quantile( p, this.mu, this.sigma );\n}\n\n\n// MAIN //\n\n/**\n* Normal distribution constructor.\n*\n* @constructor\n* @param {number} [mu=0.0] - location parameter\n* @param {PositiveNumber} [sigma=1.0] - scale parameter\n* @throws {TypeError} `sigma` must be a positive number\n* @returns {Normal} distribution instance\n*\n* @example\n* var normal = new Normal( 1.0, 1.0 );\n*\n* var y = normal.cdf( 1.5 );\n* // returns ~0.691\n*\n* var mu = normal.mean;\n* // returns 1.0\n*/\nfunction Normal() {\n\tvar sigma;\n\tvar mu;\n\tif ( !(this instanceof Normal) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Normal();\n\t\t}\n\t\treturn new Normal( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tmu = arguments[ 0 ];\n\t\tsigma = arguments[ 1 ];\n\t\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Location parameter must be a number. Value: `%s`.', mu ) );\n\t\t}\n\t\tif ( !isPositive( sigma ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Scale parameter must be a positive number. Value: `%s`.', sigma ) );\n\t\t}\n\t} else {\n\t\tmu = 0.0;\n\t\tsigma = 1.0;\n\t}\n\tdefineProperty( this, 'mu', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn mu;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tmu = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'sigma', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn sigma;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tsigma = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Normal distribution differential entropy.\n*\n* @name entropy\n* @memberof Normal.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var normal = new Normal( 4.0, 12.0 );\n*\n* var v = normal.entropy;\n* // returns ~3.904\n*/\nsetReadOnlyAccessor( Normal.prototype, 'entropy', function get() {\n\treturn entropy( this.mu, this.sigma );\n});\n\n/**\n* Normal distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Normal.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var normal = new Normal( 4.0, 12.0 );\n*\n* var v = normal.kurtosis;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Normal.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.mu, this.sigma );\n});\n\n/**\n* Normal distribution expected value.\n*\n* @name mean\n* @memberof Normal.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var normal = new Normal( 4.0, 12.0 );\n*\n* var v = normal.mean;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Normal.prototype, 'mean', function get() {\n\treturn mean( this.mu, this.sigma );\n});\n\n/**\n* Normal distribution median.\n*\n* @name median\n* @memberof Normal.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var normal = new Normal( 4.0, 12.0 );\n*\n* var v = normal.median;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Normal.prototype, 'median', function get() {\n\treturn median( this.mu, this.sigma );\n});\n\n/**\n* Normal distribution mode.\n*\n* @name mode\n* @memberof Normal.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var normal = new Normal( 4.0, 12.0 );\n*\n* var v = normal.mode;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Normal.prototype, 'mode', function get() {\n\treturn mode( this.mu, this.sigma );\n});\n\n/**\n* Normal distribution skewness.\n*\n* @name skewness\n* @memberof Normal.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var normal = new Normal( 4.0, 12.0 );\n*\n* var v = normal.skewness;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Normal.prototype, 'skewness', function get() {\n\treturn skewness( this.mu, this.sigma );\n});\n\n/**\n* Normal distribution standard deviation.\n*\n* @name stdev\n* @memberof Normal.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var normal = new Normal( 4.0, 12.0 );\n*\n* var v = normal.stdev;\n* // returns 12.0\n*/\nsetReadOnlyAccessor( Normal.prototype, 'stdev', function get() {\n\treturn stdev( this.mu, this.sigma );\n});\n\n/**\n* Normal distribution variance.\n*\n* @name variance\n* @memberof Normal.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var normal = new Normal( 4.0, 12.0 );\n*\n* var v = normal.variance;\n* // returns 144.0\n*/\nsetReadOnlyAccessor( Normal.prototype, 'variance', function get() {\n\treturn variance( this.mu, this.sigma );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Normal.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var normal = new Normal( 2.0, 4.0 );\n*\n* var v = normal.cdf( 0.5 );\n* // returns ~0.354\n*/\nsetReadOnly( Normal.prototype, 'cdf', normalCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof Normal.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logarithm of the CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var normal = new Normal( 2.0, 4.0 );\n*\n* var v = normal.logcdf( 0.5 );\n* // returns ~-1.039\n*/\nsetReadOnly( Normal.prototype, 'logcdf', normalLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof Normal.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var normal = new Normal( 2.0, 4.0 );\n*\n* var v = normal.logpdf( 0.8 );\n* // returns ~-2.35\n*/\nsetReadOnly( Normal.prototype, 'logpdf', normalLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Normal.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var normal = new Normal( 2.0, 4.0 );\n*\n* var v = normal.mgf( 0.01 );\n* // returns ~1.021\n*/\nsetReadOnly( Normal.prototype, 'mgf', normalMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Normal.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var normal = new Normal( 2.0, 4.0 );\n*\n* var v = normal.pdf( 0.8 );\n* // returns ~0.095\n*/\nsetReadOnly( Normal.prototype, 'pdf', normalPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Normal.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var normal = new Normal( 2.0, 4.0 );\n*\n* var v = normal.quantile( 0.5 );\n* // returns 2.0\n*/\nsetReadOnly( Normal.prototype, 'quantile', normalQuantile );\n\n\n// EXPORTS //\n\nmodule.exports = Normal;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Normal distribution constructor.\n*\n* @module @stdlib/stats-base-dists-normal-ctor\n*\n* @example\n* var Normal = require( '@stdlib/stats-base-dists-normal-ctor' );\n*\n* var normal = new Normal( 1.0, 1.0 );\n*\n* var y = normal.cdf( 1.5 );\n* // returns ~0.691\n*\n* var mu = normal.mean;\n* // returns 1.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "defineProperty", "setReadOnly", "setReadOnlyAccessor", "isPositive", "isNumber", "isnan", "entropy", "kurtosis", "mean", "median", "mode", "skewness", "stdev", "variance", "cdf", "logcdf", "logpdf", "mgf", "pdf", "quantile", "format", "normalCDF", "x", "normalLogCDF", "normalLogPDF", "normalMGF", "t", "normalPDF", "normalQuantile", "p", "Normal", "sigma", "mu", "value", "main"]
}
